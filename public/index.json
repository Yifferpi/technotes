[
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Coding / Languages",
    "uri": "/coding/"
  },
  {
    "content": "Topics git Networking tools ssh System Management Vim Linux Essentials  ",
    "description": "",
    "tags": null,
    "title": "Tools / Concepts",
    "uri": "/tools/"
  },
  {
    "content": "Topics ",
    "description": "",
    "tags": null,
    "title": "Security",
    "uri": "/security/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Miscellaneous",
    "uri": "/misc/"
  },
  {
    "content": "Ansible notes basic concepts  Control Node is any machine with Ansible installed Managed Node is any machine controlled with Ansible Inventory is a list of all managed nodes, with options for grouping Collection distribution format for content, can include playbooks, roles, modules and plugins. Collections are installed through Ansible Galaxy Modules are the units of code that ansible executes Tasks are the unit of Actions in Ansible Playbook is an ordered list of tasks  Inventory Inventory is a grouped list of managed nodes / hosts, typically ini or yaml file. ini example:\nmail.example.com [webservers] foo.example.com bar.example.com [dbservers] one.example.com two.example.com three.example.com  default path for inventory is /etc/ansible/hosts alternative inventory file can be given with -i flag  Basic command ansible [pattern] -m [module] -a \"[module options]\"\n default module is the command module this is the ad-hoc way to issue commands (as opposed to playbooks)  Playbooks  offer repeatable, reusable, simple configuration management expressed in yaml files playbook consists of multiple ‘plays’, each of which executes a series of tasks each task calls an ansible module playbook runs from top to bottom playbooks are run with ansible-playbook command  Roles Modules in ansible.builtin collection  template copy to copy files, and fetch to copy to local machine file to manage or change owner and file permissions yum or others to manage packages user to manage users service to manage state of services setup module to gather facts about the systems  ",
    "description": "",
    "tags": null,
    "title": "Ansible",
    "uri": "/coding/ansible/"
  },
  {
    "content": " Bash Essentials  special symbols hotkeys source vs. sh foreground and background jobs   Bash Script Examples  The following paragraphs explain shell tricks and concepts that are very helpful in everyday use. They are mostly not commands.\nspecial symbols  \u003e: pipe into file, overwriting \u003e\u003e: append to a file \u0026\u003e\u003e: append both stdout and stderr \u0026: run program in child process (e.g firefox \u0026) |: pipe to another application -: ?  hotkeys  Ctrl-l: clear the terminal (same as typing clear) Ctrl-a: Go to beginning of line Ctrl-e: Move cursor to end of line Ctrl-r: Reverse command search, find a command in recent history Ctrl-c: Terminate the current process Ctrl-d: End of file (EOF), on empty line, this closes the shell Ctrl-w: delete part of the word before the cursor (e.g. hello wor|ld becomes hello ld) Ctrl-u: delete part of the line before the cursor (e.g. hello w|orld becomes orld)  source versus sh source (or .) executes a script in the current shell. It is commonly used to reread configuration files (e.g. . ~/.bash_rc)\nIn contrast, bash \u003cscript\u003e (or ./script) spawns a new child process in which the script is executed.\nResource\nforeground and background jobs Most programs you start from a shell take over that shell. After the program is launched, all commands you type in the window go to the program rather than the underlying shell.\n Launching a program with \u0026 appended (e.g. firefox \u0026) starts the program in the background. Pressing Ctrl-z when the program is in foreground (i.e. occupying the shell) moves the program to the background and suspends it. Typing bg resumes the program in the background. Typing fg brings the program to the foreground again.  You can also have multiple programs run in the background.\n Current programs spawned from this shell can be listed with jobs. The first column of the listed jobs contains the job IDs. You can bring a specific program to foreground with fg \u003cjob_id\u003e  todo  stdin stdout and stderr special directories . and .. important environment variables config file concept of $PATH  Commands Overview  ls cd cat less and more tree touch mv cp mkdir and rmdir chmod chown head tail cut sort tr df and du tee  read from standard in, copy to file and stdout Store output of a command into outputfile and also continue processing: ... | tee \u003coutputfile\u003e | grep \u003cpattern\u003e   awk sed grep  cat file | grep -v ^#: no lines starting with # cat file | grep -v ^$: no empty lines    Bash script examples In the following paragraphs, some common and frequently used bash script patterns are collected.\nAsking user for confirmation while true; do # read is the most common way to ask for user input: read -p \"Do you wish to install this program?\" yn case $yn in [Yy]* ) echo \"Installing...\"; break;; [Nn]* ) exit;; * ) echo \"Please answer yes or no.\";; esac done while loop while true do read -p \"Really run script?\" answer case $answer in [yY]* ) echo \"Okay, running:\" break;; [nN]* ) exit;; * ) echo \"Dude, just enter Y or N please.\";; esac done echo \"Hello world\" find script directory DIR=$(dirname \"$0\") cd \"$DIR\" ",
    "description": "",
    "tags": [
      "programming",
      "scripts"
    ],
    "title": "Bash",
    "uri": "/coding/bash/"
  },
  {
    "content": "Unicode Unicode is a Standard, not an Encoding Standard for consistent encoding, representation and handling\n Maintained by Unicode Consortium consists of more than 140'000 graphic characters, 160 format characters covers more than 150 modern and historic scripts, multiple symbol sets and emojis  UTF-8 UTF-8 is a variable-width character encoding. Defined by the Unicode standard.\nBase64 Base64 is a group of binary-to-text encoding schemes. Represents binary data in ASCII string format\nFixed vs Variable Byte encodings fixed 4 bytes | 4 bytes | 4 bytes | 4 bytes | 4 bytes variable 2 bytes | 2 bytes | 3 bytes | 1 bytes | 4 bytes works with prefix codes, declaring the length\ncontinuation bit 0, end bit 1. packets of size n, starting with either continuation or end bit. either it is the last packet or not.\n100000110010101 0'0000001 0'0000011 1'0010101\n100101100110011100100100000 0'0100101 0'1001100 0'1110010 1'0100000\n111001001011001110 0'0001110 0'0100101 1'1001110\nGamma Encoding Unary code 12 –\u003e 1111'1111'11110 (zero to terminate) Gamma code\n convert to zero get rid of leading 1 determine length write length in unary code concat ‘length in unary code’ with ‘binary without leading 1’  properties of gamma encoding:\n variable length encoding prefix encoding universal encoding some good propery in light of shannon entropy  decimal –\u003e binary –\u003e no leading 1 –\u003e unary of length 111222 –\u003e 11011001001110110 –\u003e 1011'0010'0111'0110 –\u003e 1111'1111'1111'1111'0 –\u003e 1111'1111'1111'1111'0 89603 –\u003e 10101111000000011 –\u003e 0101'1110'0000'0011 –\u003e 1111'1111'1111'1111'0 –\u003e 1111'1111'1111'1111'0 93710 –\u003e 10110111000001110 –\u003e 0110'1110'0000'1110 –\u003e 1111'1111'1111'1111'0 –\u003e 1111'1111'1111'1111'0\n",
    "description": "",
    "tags": null,
    "title": "Encodings",
    "uri": "/misc/encodings/"
  },
  {
    "content": "iptables  General concepts  nftables a good resource\n nft --handle list ruleset: lists rules including handles nft insert rule inet filter input ip saddr grader.dtf.netsec.inf.ethz.ch accept nft delete rule inet filter input handle 17 nft add rule inet filter input tcp dport 5432 drop  ufw Unix firewall\ngufw for graphical version\n",
    "description": "",
    "tags": null,
    "title": "Firewall",
    "uri": "/security/firewalls/"
  },
  {
    "content": " find / -name \".git\" to find all gitrepos prettyprint the graph: git log --all --decorate --oneline --graph git branch \u003cbranchname\u003e to create new branch git branch -a to list all branches git checkout \u003cbranchname\u003e to checkout existing branch git branch -f \u003csource\u003e \u003ctarget\u003e to move a branch. You cannot be on target. forward port reachable from remote host: ssh -L localport:192.168.x.x:remoteport user@domain.tld  ",
    "description": "",
    "tags": null,
    "title": "git",
    "uri": "/tools/git/"
  },
  {
    "content": "tcpdump Usage  tcpdump -i \u003cinterface\u003e three steps of verbosity: -v -vv -vvv finding ssh connections independent of port used: tcpdump 'tcp[(tcp[12]\u003e\u003e2):4] = 0x5353482D'  Resources A tcpdump Tutorial with Examples\nWireshark Wireshark is the GUI application and Tshark the command line version. Wireshard makes packets more readible but the filtering system is essentially the same.\nnmap Host discovery Ping Scan: nmap -sP 192.168.1.0/24\n in newer versions, this is called -sn can be prettified with -oG - (greppable output)  List Scan: nmap -sL 192.168.1.0/24 nmap -sP -PN -R --system-dns 192.168.2.0/24 | grep -i .wg\n-R: DNS resolution for all targets, not only responsive hosts\n -sP: see -sn -Pn: (No ping), skips discovery stage alltogether, -PN in older versions  nmap -sP -sn -oG - 192.168.2.0/24\n -sn: Ping Scan - disable port scan, -sP in older versions nmap scripting engine nmap commands nmap overview  netcat todo\nnetdiscover todo\nip Resource\nDNS  dig \u003cdomainname\u003e systemd-resolve --statistics and systemd-resolve --flush-cache  ",
    "description": "",
    "tags": null,
    "title": "Networking tools",
    "uri": "/tools/networking/"
  },
  {
    "content": "NGINX configuration NGINX is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The NGINX alias directive defines a replacement for the specified location. For example, with the following configuration:\nlocation /app/ { alias /var/www/app/; } on request of /app/top.gif, the file /var/www/app/top.gif will be sent. But, if the location doesn’t ends with directory separator (i.e. /):\nlocation /app { alias /var/www/app/; } on request of /app../secret/config.py, the file /var/www/secret/config.py will be sent. The incorrect configuration of the alias could allow an attacker to read file stored outside the target folder.\n",
    "description": "",
    "tags": null,
    "title": "nginx configuration",
    "uri": "/misc/nginx/"
  },
  {
    "content": "Virtual Environments venv for python\nallows to install Python packages and a Python Interpreter in an isolated location from the rest of the system instead of installing globally\nReasons:\n preventing version conflict  Isolation could be separate PC, separate VM, a docker container or a venv\nHow to set up: python -m select a module from sys.path to run as a script\n for pythn3.4 and above, there is the baked-in package venv for versions below, use virtualenv (might need systemwide install first)  For python3.4 and above:\n python -m venv \u003cdirectory\u003e to create a virtual environment in  source \u003cdirectory\u003e/bin/activate to activate the environment deactivate to deactivate the environment if created with python -m venv, simply remove the directory to delete env  the environment is active on the entire system. internally, it works by modifying the head of the path variable.\nResource\nGeneral Resources Python Tutorials Advanced Python Webscraping\n",
    "description": "",
    "tags": null,
    "title": "Python",
    "uri": "/coding/python/"
  },
  {
    "content": "In this article, we list common attack paradigms / patterns, try to explain them, and potentially list examples.\n  proxy attack\n  downgrade attack\n  MitM attack\n  side channel attack\n  roll-back attack\n  DoS attack\n  relay / replay attack\n  supply chain attack\n  Slow Loris\n  POODLE\n  Heartbleed\n  Cuckoo attack (TPMs)\n  confused deputy attack (TEE: on ARM TrustZone)\n  Cold Boot attack\n  Runtime attacks:\n Buffer Overflow Format String Double free Use-after-free    proxy attack: contact other host for faster computation of checksum in the context of time-based attestation\n  downgrade attack: force a key exchange protocol to use weaker cryptographic primitives than either participant supports\n  man-in-the-middle attack: pretend to both participants to be the other participant\n  side-channel attacks: any attack based not on the protocol but on a concrete implementation, where information to reduce the keyspace is leaked over a so-called ‘side channel’\n  roll-back attack: roll back state\n  denial of service attack: attack where the legitimate users of the service can no longer use it (are denied access in some way)\n  ",
    "description": "",
    "tags": null,
    "title": "Security Basics",
    "uri": "/security/attack_types/"
  },
  {
    "content": "This page introduces diverse topics / functions related to SSH which go beyond the basics. They are mostly unused by beginners and casual SSH users but are very much appreciated once you know about them.\nNoteSSH is sometimes referred to as “poor man’s VPN”.\n  There are two distinct parts to SSH: the client and the server. A user’s client config can generally be found at ~/.ssh/  The ~/.ssh/config file specifies parameters per host. This way, most ssh flags can be replaced.   The server’s config can be found at /etc/ssh/sshd_config.  SSH Client Cheatsheet Collection of rather common simple commands:\n -p flag to use a different port Most basic form to execute a remote command is using backticks: ssh user@domain.tld 'sudo apt install git'  ssh-copy-id user@host to copy own public key to host  Use the ssh config file The ssh config file is located at ~/.ssh/config. Assume you originally wrote ssh -p 2222 tony@192.168.1.2. After writing\nHost stark-machine User tony Hostname 192.168.1.2 Port 2222 into the config file, you can now connect with ssh stark-machine.\nNoteThere are many directives for virtually any existing command line flag. Some are outlined in other paragraphs where needed. A comprehensive list see man ssh_config.\n ssh proxy jump A common scenario is that only one host in a LAN is exposed to the outside, e.g., by port forwarding. Let’s call it the entry host. We might want to connect to a different host (call it target host) inside that LAN that is not exposed to the outside.\nWhat we can do first connect to the entry host, and from there to the target host as the target host is in the same subnet as the entry host:   Example  tony@stark:\u003e ssh keeper@entryhost keeper@entryhost:\u003e ssh admin@targethost admin@targethost:\u003e echo \"Hello World\" Hello World   \nWhat we can do with ssh instead is make a proxy jump:\ntony@stark:\u003e ssh -J keeper@entryhost admin@targethost This is equivalent to ssh’ing into entryhost and from there ssh’ing into targethost.\nTipThe same can be achieved by adding the ProxyJump directive for the target host in ~/.ssh/config.\n Make remote port locally available Using the -L flag, one can make a port locally available that is visible from the remote host. The basic command looks as follows: ssh -L localport:192.168.x.x:remoteport user@domain.tld In the above graphic, the arrows correspond to:\n Red: ssh -L 3000:localhost:443 user@192.168.1.1 Blue: ssh -L 3000:192.168.1.2:8443 user@192.168.1.1  Assuming for example 192.168.1.1:443 was running a webserver, we could on our local host (where we issued the command) open a browser and go to https://localhost:3000 and would find the website hosted on 192.168.1.1:443.\nNoteThe localhost in ssh -L 3000:localhost:443 user@192.168.1.1 refers to 192.168.1.1 (localhost from its perspective) whereas the localhost in the URL refers to your localhost 172.16.1.1.\n The -L flag is used if the command is issued from the local machine, i.e., when the target port should be made available locally. There is also the -R flag which makes a port available on the remote host.\nTODO: more detailed -R command\nAutomatic tmux session Traditionally, if you experience connection loss during an ssh session, logging back in brings you into a new shell with no access to the old one. If you had a running program in the previous shell (e.g. compiling something) you don’t get access to it anymore. This is where tmux comes in as it allows for tty sessions to exist over different ssh sessions. Normally you would ssh starkmachine to connect and then tmux new-session -s ssh-tmuxsession to create a new session or after a connection loss tmux attach-session -t ssh-tmuxsession to reattach.\nAdding the following to ~/.ssh/config allows you to automatically attach to the session (or create it if it doesn’t already exist) every time you connect via ssh (i.e. on connecting with ssh starkmachine).\nHost starkmachine User tony HostName 192.168.1.2 RemoteCommand tmux new-session -A -s ssh-tmuxsession RequestTTY yes An even more advanced variant to create new sessions on the fly:\nHost starkmachine-* User tony HostName 192.168.0.12 RemoteCommand tmux new-session -A -s ${%n} RequestTTY yes Resource\nUse SOCKS5 proxy TODO\nForward X11 TODO\nthis is not only ssh, sshd must be configured appropriately\nSSHD config file location: /etc/ssh/sshd_config\n set PubkeyAuthentification to yes for auth via public key set PasswordAuthentication to no to only allow public key systemctl restart sshd.service for changes to take effect  all of the above requires sudo\nReverse SSH tunnel ssh -p2000 -fNC -R 10011:localhost:22 pi@dyn.IP.adresse for reverse\nssh -p 10011 localhost on gateway\nProblems with cronjob at reboot.. here a solution: \n ssh-agent bash to create a new agent ssh-add ~/.ssh/id-rsa to add key and enter password\nthe above is valuable for cases like ansible, where otherwise the password would need entering many times  ",
    "description": "",
    "tags": [
      "networking",
      "tools"
    ],
    "title": "ssh",
    "uri": "/tools/ssh/"
  },
  {
    "content": "This page is concerned with tools that help with management of a linux (ubuntu) system from the command line.\nnmcli  nmcli dev wifi to list available wifi nmcli dev wifi connect SSID --ask: connect to a new wifi nmcli con [up|down] SSID manage stored connection  nm-applet for i3bar utility\nbluetoothctl  bluetoothctl to enter interactive  in bluetooth, you pair once (exchange initial info) and then connect (two distinct steps!)\ntrusting a device means it will autoconnect to that device\nSystem control  pavucontrol: graphical sound manager  device listing  lsblk -p: list all storage devices lsblk -f: list only mounted lsusb: todo lspci: todo  xrandr todo\nAutostart  cron on reboot systemctl [enable|disable] postgres: add/remove from autostart works only if service is stopped  Mounting a device  sudo mount /dev/sda ~/mountdir sudo umount [device|dir]  systemctl  systemctl list-dependencies \u003cservice\u003e systemctl is-active \u003cservice\u003e  There are different types of systemd units.\nSome example commands:\n systemctl list-units --type=service --state=active systemctl status nginx.service systemd unit types systemd unit files  ",
    "description": "",
    "tags": null,
    "title": "System Management",
    "uri": "/tools/system_management/"
  },
  {
    "content": " sha256sum file: compute checksum sha256 -c sha256sumfile: to check  Ghidra reverse engineering tool with great decompiler\n  start project, then open file in CodeBrowser\n  accept analyzing\n  Menu\u003eWindow gives a series of views, e.g. Defined Strings, Function Graph, and Function Call Graph\n  GDB   br *main+12: setting breakpoint\n  s: stepping one instr\n  finish: continue to return statement of current function\n  continue: continue regular execution until next break\n  info frame 0: print some info about frame 0\n  x/4w $sp or x/4w x7fffde60: print 4 words starting at stack pointer or given address\n  x/s $rdi: print value in rdi formated as a string\n  x/10i, x/xg, x/20xb\n  set $buffer=0x7ffffffddd0: set arbitrary variable, must not exist in HW\n  ni: show next instruction\n  vmmap: show all memory regions mapped to our virtual memory\n  gdb disables Address Space Layout Randomization (ASLR) by default.\n  turn on with aslr on before run\n  printing addresses with print main, subtracting labels allowed!\n  checksec: display which security measures are active in the binary\n  ",
    "description": "",
    "tags": null,
    "title": "utility tools",
    "uri": "/security/utility/"
  },
  {
    "content": "On this page, a jumble of Vim shortcuts and functions are collected that I find very useful.\nDelete text Some examples:\n ciw: cut word (without following space), then go into insert mode daw: cut word including following space dd: delete entire line, remain in normal mode  c goes into insert mode after deleting whereas d only cuts\nsmall w only considers letters big W also considers brackets\n ctrl-v to enter Visual block mode shift-I to go insert mode, change entire block  Command :\u003e\u003e and :\u003c: shift two indents to the right / one to the left\nMacros  Recording: press q followed by key you want to store the makro in, then do your thing, in the end, press q in normal mode again. to execute a macro, press @ followed by the key the macro is stored in  how to execute a macro multiple times? how to look at the macro registry\n",
    "description": "",
    "tags": [
      "editor"
    ],
    "title": "Vim",
    "uri": "/tools/vim/"
  },
  {
    "content": "VPN basics Virtual Private Networks (VPN) create secure channels between two endpoints over an untrusted network (e.g. the Internet). There is generally a setup phase, followed by the tunneling phase.\nTypical properties are authentication of the other endpoint (e.g. with MACs), confidentiality (usually based on symmetric crypto), and some sort of replay suppresion (i.e. sequence numbers).\nCommon Setups:\n site-to-site (e.g. regional office) host-to-site (e.g. home office) secure proxy (e.g. to circumvent censorship)  Great variety of implementations:\n authentication mechanisms: pre-shared key (PSK), public key and certs, username and password tunneling mechanisms: IPSec, OpenVPN, Wireguard userspace, kernel, hardware implementations Layer of connected nets: link or network layer (Inner protocol)  Wireguard Install with apt install wireguard\nAfter installation:\nsudo su cd /etc/wireguard umask 077 to protect wireguard directory appropriately\nCommand to generate key pair for server: wg genkey | tee server_private_key | wg pubkey \u003e server_public_key Repeat for each peer\nCreate a wg0.conf file in /etc/wireguard on the server side:\n[Interface] Address = 10.253.3.1/24 SaveConfig = true PrivateKey = \u003cinsert server_private_key\u003e ListenPort = 51900 PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] PublicKey = \u003cinsert client_public_key\u003e AllowedIPs = 10.253.3.2/32  replace server_private_key and client_public_key possibly change eth0 to wlan0 don’t forget to forward ListenPort on the router  Enable port forwarding on vpn server In /etc/sysctl.conf, change/uncomment net.ipv4.ip_forward to 1 this allows the vpn server to act as a router\nStart up Wireguard systemctl enable wg-quick@wg0 chown -R root:root /etc/wireguard/ chmod -R og-rwx /etc/wireguard/*  systemctl enable adds wg-quick@wg0 to autostart the others again limit access to wireguard config directory then restart to get wireguard going on the vpn server  Set up client Create a wg0.conf file in /etc/wireguard on the client side:\n[Interface] Address = 10.253.3.2/32 PrivateKey = \u003cinsert client_private_key\u003e DNS = 1.1.1.1 [Peer] PublicKey = \u003cinsert server_public_key\u003e Endpoint = \u003cinsert vpn_server_address\u003e:51900 AllowedIPs = 0.0.0.0/0, ::/0  AllowedIPs = 0.0.0.0 means that only the client is accessible/visible through the vpn tunnel Address must be from the address range specified in the server config under [Peer] AllowedIPs to bring it up, type sudo wg-quick up wg0 to check if it works: sudo wg  Note  AllowedIPs on client side is like access control: only listed IPs are allowed incoming, rest is dropped on server: AllowedIPs is like routing: tells packets where to go  Resources more involved tutorial!  Simple Home Setup  Details on allowing certain ip ranges \n",
    "description": "",
    "tags": [
      "security"
    ],
    "title": "VPN",
    "uri": "/security/wireguard/"
  },
  {
    "content": "Security properties There are different security concepts that are gathered under the umbrella term “security”. In the following, we introduce some of these concepts and try to outline the difference and clarify for later discussions.\n  Confidentiality: keep unauthorized people from reading the data / keep data secret. In some literature, there is further distinction between secrecy (keep own data secret) and confidentiality (keep someone else’s data secret).\n  Authentication: knowing the source / sender of the data to be legitimate / the person they pretend to be (data (origin) authentication) or verifying the identity and liveness of another protocol participant (entity authentication).\n  Integrity: knowing data has not been changed / tampered with by someone unauthorized to do so.\n  Privacy: keep data about a person secret\n  Anonymity: keep identity of a protocol participant secret\n  Authorization: check whether someone is entitled to use a certain service / access certain data.\n  Availability: make sure communication cannot be prevented / protect against Denial of Service.\n  Security primitives Security primitives is what we call basic building blocks for more complex cryptographic algorithms. We distunguish two types: symmetric and asymmetric. The simple but fundamental difference is the following: in symmetric procedures, there is one key only whereas in asymmetric procedures, there are two distinct keys where one is usually published and the other kept secret.\n   Property confidentiality authentication     symmetric Symmetric Encryption MAC   asymmetric Public Key Encryption Digital Signature    Symmetric cryptography is much faster / less expensive than asymmetric cryptography. This is reflected in the key size that is commonly used: symmetric procedures like AES use key sizes of around 128 to 256 bit whereas asymmetric procedures like RSA use keys of 4096 bit.\nThe question then is why do we need asymmetric crypto?\nAs we mentioned, symmetric procedures have only one key. That same key is used for both, encryption and decryption. This implies that communicating parties must both be in possession of this key, i.e., must have a shared secret. This is not always the case. This is where asymmetric crypto comes in handy.\nIn asymmetric procedures on the other hand, there are two keys a and b. If a message is encrypted using key a, then it can only be decrypted with key b and vice versa. By making key a your private key and publishing key b you allow people to encrypt messages that only you can read.\nSymmetric Encryption Symmetric encryption can be split into:\n block ciphers (pseudo-random permutation) stream ciphers (pseudo-random generator)  Stream Ciphers: generate pseudo-random key stream from a key k and an initialization vector IV. xor the keystream with the plaintext to obtain a cipher text. Whoever can generate the same keystream can decrypt the message again.\nThis is basically a one-time pad as long as the key stream is never reused.\nExamples: AES in CTR mode, Salsa, ChaCha (used in TLS1.3, Wireguard)\nPotential vulnerabilities: keystream reuse attacks (xor is dangerous)\nBlock Ciphers: A substitution cipher with random permutation, the key defines a one-to-one mapping between an input block and output block. Each block of plaintext is encrypted separately.\nEncrypting the blocks by itself is not secure. There are different modes of operation for block ciphers:\n ECB (Electronic Code Book) (not secure: Linux penguin..) CBC (Cipher Block Chaining) Other modes that make a stream cipher from a block cipher again: CFB (Cipher Feedback) OFB (Output Feedback) CTR (Counter Mode) GCM (Galois Counter Mode) (encryption and integrity in single pass)  Example: DES, AES\nMessage Authentication Codes Provide a cryptographic checksum for authentication / integrity. Compute MAC(k, m) where k is a shared symmetric key and m a message.\nHash-based MAC are referred to as HMAC. Block cipher based MAC: CMAC\nAuthenticated Encryption with Associated Data (AEAD) AEAD has two goals: encrypt the plaintext message and ensure the integrity of the ciphertext and its associated data.\nEssentially aims to combine encryption and integrity protection in a secure way. Uses “Encrypt-then-MAC” to avoid problems with “MAC-then-Encrypt” and “Encrypt-and-MAC” Comes as a single ready-to-use cryptographic primitive with a simple API.\nAES-GCM is a nonce-based AEAD built from a block cipher in CTR mode and the Galois MAC. Today mostly with AES (therefore AES-GCM)\nDiffie Hellmann Key Exchange Public values: large prime p, generator g Alice has secret value a, Bob has secret value b\nTODO: exchange example in small numbers, exchange graphic, clock analogy, color mixing example\nsequenceDiagram Alice -\u003e\u003e Bob: How are you? Bob --\u003e\u003e Alice: Good. How bout you? The problem: Man-in-the-Middle attack. (–\u003e discussion of Out-of-Band channels)\nRSA Textbook RSA:\n pick p, q large secret primes. pick e, compute d such that e*d = 1 mod (p-1)(q-1)   public key: e, N=pq private key: d    The keypair can be used for either digital signatures or public key encryption.\nHash functions A hash function maps an arbitrary-length input to a finite length output. Properties of a secure (cryptographic) hash function:\n One-way Weak collision resistence Strong collision resistence  Examples: MD5 (broken), SHA-1 (broken), SHA-2, SHA-3\nOne-way hash chains:\n use in reverse order of construction for e.g. time-delayed authentication  Merkle Hash Trees: D_i are data values. Verifier knows T_0 hash value.\nGeneral Notes Difference between authentication with MAC vs. with Digital Signature: authentication with MAC enables the receiver to verify the origin. But the receiver cannot convince a third party. Problem: the one who can verify can also forge.\n",
    "description": "",
    "tags": null,
    "title": "Cryptography",
    "uri": "/security/cryptography/"
  },
  {
    "content": "directory structure contains all sorts of configuration files\n  /etc/passwd: userlist\n  /etc/shadow: userlist including password hashes\n  /etc/group: groups and list of users that belong to it\n  /etc/environment: global environment variables\n  /etc/hosts: static lookup table for hostnames, superseded by DNS\n  /etc/hostname: static hostname used to init kernel hostname\n  /etc/machine-info: contains info like location, chassis, prettyname, etc. not present on every machine\n  /etc/apt: config of apt\n  /etc/apt/sources.list: file with apt repository sources\n  /etc/apt/sources.list.d: directory for more sources\n  /etc/systemd/multi-user.target.wants: autostart services\n  /etc/NetworkManager/system-connectons: wifi connections, SSIDs\n  Variable content that is changed by programs. Prominently:\n /var/log: place where many logfiles are  Interprocess Communication (IPC)  Good Resource sockets AF_NET, etch  General tty, etc\n dmidecode to dump system info, e.g. dmidecode -t bios  ",
    "description": "",
    "tags": null,
    "title": "Linux Essentials",
    "uri": "/tools/linux/"
  },
  {
    "content": "Hi, and welcome on my website. Here, I present my notes on different tools and technologies or rant about things in blog posts.\n",
    "description": "",
    "tags": null,
    "title": "Startpage",
    "uri": "/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "editor",
    "uri": "/tags/editor/"
  },
  {
    "content": "Mostly a summary of “Not so short Intro to LaTex”\nCommands and Rules  empty line between two lines defines a new paragraph single new line is treated as a regular single whitespace multiple whitespaces are treated as a regular single whitespace whitespaces after commands are ignored to get whitespace after command add empty params {} and a whitespace commands take required params in {} and optional params in []  Comments  comments are done with % % can also be used to split lines where no space is allowed for longer comment, use comment environment from verbatim package:  \\begin{comment} ... \\end{comment} Layout Structure\n every input file must start with \\documentclass{...} after that, commands that influence style of entire doc or load packages when setup work is done: \\begin{document} ... \\end{document anything after end will be ignored \\pagestyle{[plain|headings|empty]} for choice of header \\include{file} to split input file. content will be on new page only check syntax: \\usepackage{syntonly} \\syntaxonly  Packages:\n primary source for info: Frank Mittelbach:The Latex Companion texdoc \u003cpackagename\u003e command for looking at package documentation     Type Description     .tex Tex Input File   .sty Tex Macro Package: load this with \\usepackage   .dtx documented TeX: main distribution format for latex style files   .ins installer for files contained in matching .dtx. run latex on the .ins to unpack the .dtx   .cls class file: defines what the document looks like. selected with \\documentclass   .fd font description: telling latex about new fonts    Typesetting   \\\\ or \\newline starts new line without starting new paragraph\n  \\\\* additionally prohibits pagebreak\n  \\newpage starts a new pageA\n  \\linebreak[n],\\nolinebreak[n],\\pagebreak[n],\\nopagebreak[n] suggests places\n  n at a value below 4 leaves Latex the option to ignore the command\n  \\newline, \\newpage makes a new page to really start a new line/page\n  \\sloppy lowers Latex linebreak requirements, \\fussy raises it again\n  \\hyphenation{FORTRAN Hy-phen-a-tion} to make exceptions to hyphenation algo\n  above: FORTRAN will not be hyphened, Hyphenation can be at all dashes\n  \\mbox{text} keeps words together on one line, \\fbox{text} draws additional visible box\n  ready made strings: \\today, \\latex, \\tex\n  dont use normal quotation marks: use backticks (one or two) to start and straight ticks to end\n  dashes can be done with different length: 1 to 3\n  start and end embedded math with $\n  different language: start environment \\begin{german} ... \\end{german}, also \\textgerman{germanword}\n  package polyglossia for fonts and languages\n  setting fonts: \\setmainfont{...}, \\setsansfont{...}, \\setmonofont{...}\n  latex inserts more whitespace after end of sentence. can be disabled with \\frenchspacing\n  backslash before space ensures space will not be enlarged, ~ does same and prohibits linebreak\n  sectioning depends on document class, \\chapter not always available\n  normally \\section{}, \\subsection{}, \\paragraph{}, \\subparagraph{}\n  \\part does not affect numbering, \\appendix takes no argument, \\tableofcontents generates toc\n  * after sectioncommand: heading does not show up in toc and has no numbering\n  short title for toc: \\section[short name]{long name}\n  \\title, \\author, \\date define and \\maketitle generates the title(page)\n  bookclass: \\frontmatter makes roman page numbering, followed by \\mainmatter, \\appendix, \\backmatter\n  cross references: \\label{l} for def (put label after!), \\ref{l}, \\pageref{l} for ref\n  \\footnote{text} to be put after word or sentence, makes footnote on current page\n  emphasizing: \\underline{text} or even better: \\emph{text}, different per context\n  Environments\n \\begin{environment name} ... \\end{environment name} itemize for simple lists,  ennumerate for numbered, description for descriptions \\item generates an item, sometimes optional params like - can be given other environments: flushleft, flushright and center quote for quotes, quotation for longer quotes (multiple paragraphs) and verse for poems there is also an abstract environment for scientific articles verbatim environment: directly printed with all linebreaks, no latex processing verbatim can be embedded with \\verb+text+ command where + can be any delimiter tabular environment for tables (see 2.11 in the book) graphics with \\usepackage{graphicx}, then \\includegraphics[key=value..]{file} figure and table are floating body environments: support optional placement specifier param float placing permissions: some of the letters h, p, t, b, ! \\caption[short]{long captiontext} defines a caption for the float reference using \\label which must come AFTER the \\caption command \\listoffigures and \\listoftables generate, analogous to ToC  Resources  What is TeX? TeX packages A not so short introduction to latex MathSymbols  ",
    "description": "",
    "tags": [
      "writing"
    ],
    "title": "Latex",
    "uri": "/coding/latex/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "networking",
    "uri": "/tags/networking/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "programming",
    "uri": "/tags/programming/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "scripts",
    "uri": "/tags/scripts/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "security",
    "uri": "/tags/security/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "tools",
    "uri": "/tags/tools/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "writing",
    "uri": "/tags/writing/"
  }
]
